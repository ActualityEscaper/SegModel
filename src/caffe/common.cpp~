#include <boost/thread.hpp>
#include <glog/logging.h>
#include <cmath>
#include <cstdio>
#include <ctime>

#include "caffe/common.hpp"
#include "caffe/util/rng.hpp"

namespace caffe {

shared_ptr<Caffe> Caffe::singleton_;

std::vector<int> Caffe::GPUs;
int Caffe::number_collect_sample = -1;

void GlobalInit(int* pargc, char*** pargv) {
    // Google flags.
    ::gflags::ParseCommandLineFlags(pargc, pargv, true);
    // Google logging.
    ::google::InitGoogleLogging(*(pargv)[0]);
    // Provide a backtrace on segfault.
    ::google::InstallFailureSignalHandler();
}

// random seeding
int64_t cluster_seedgen(void) {
    int64_t s, seed, pid;
    FILE* f = fopen("/dev/urandom", "rb");
    if (f && fread(&seed, 1, sizeof(seed), f) == sizeof(seed)) {
        fclose(f);
        return seed;
    }

    LOG(INFO) << "System entropy source not available, "
                 "using fallback algorithm to generate seed instead.";
    if (f)
        fclose(f);

    pid = getpid();
    s = time(NULL);
    seed = std::abs(((s * 181) * ((pid - 83) * 359)) % 104729);
    return seed;
}
#ifdef CPU_ONLY  // CPU-only Caffe.
//----------------------------------------
Caffe::Caffe() : random_generator_() { }

Caffe::~Caffe() { }

//----------------------------------------

void Caffe::SetDevice(const int device_id) {
    NO_GPU;
}

void Caffe::set_random_seed(const unsigned int seed) {
    // RNG seed
    Get().random_generator_.reset(new RNG(seed));
}
class Caffe::RNG::Generator {
public:
    Generator() : rng_(new caffe::rng_t(cluster_seedgen())) {}
    explicit Generator(unsigned int seed) : rng_(new caffe::rng_t(seed)) {}
    caffe::rng_t* rng() { return rng_.get(); }
private:
    shared_ptr<caffe::rng_t> rng_;
};

Caffe::RNG::RNG() : generator_(new Generator()) { }
Caffe::RNG::RNG(unsigned int seed) : generator_(new Generator(seed)) { }
Caffe::RNG& Caffe::RNG::operator=(const RNG& other) {
    generator_ = other.generator_;
    return *this;
}
void* Caffe::RNG::generator() {
    return static_cast<void*>(generator_->rng());
}

#else  // Normal GPU + CPU Caffe.
//----------------------------------------
Caffe::Caffe() : random_generator_()
{
		if (GPUs.size == 0)
			LOG(FATAL)<<"------------Please set the GPU!!!!!!!!!!!!!!!----------------------------";
		parallel_stream_.resize(GPUs.size());
    cublas_handle_.resize(GPUs.size());
    curand_generator_.resize(GPUs.size());
	
		comms_ = (ncclComm_t*)malloc(sizeof(ncclComm_t)*Caffe::GPUs.size());
  	ncclCommInitAll(comms_,Caffe::GPUs.size(),Caffe::GPUs.data());
  	
  	
    for(int i=0;i<GPUs.size();i++)
    {
        CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
        
				CUDA_CHECK(cudaStreamCreate(&parallel_stream_[i]));
				
        
        if (cublasCreate(&cublas_handle_[i]) != CUBLAS_STATUS_SUCCESS)
        {
            LOG(ERROR) << "Cannot create Cublas handle. Cublas won't be available.";
        }


        if (curandCreateGenerator(&curand_generator_[i], CURAND_RNG_PSEUDO_DEFAULT)!= CURAND_STATUS_SUCCESS ||
        		curandSetPseudoRandomGeneratorSeed(curand_generator_[i], cluster_seedgen())!= CURAND_STATUS_SUCCESS)
        {
            LOG(ERROR) << "Cannot create Curand generator. Curand won't be available.";
        }

    }


    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));
}
Caffe::~Caffe() 
{
    for(int i=0;i<GPUs.size();i++)
    {
        if (cublas_handle_[i]) CUBLAS_CHECK(cublasDestroy(cublas_handle_[i]));
        if (curand_generator_[i]) CURAND_CHECK(curandDestroyGenerator(curand_generator_[i]));
    }

}
//----------------------------------------
cublasHandle_t Caffe::cublas_handle()
{ 
    int d;
    CUDA_CHECK(cudaGetDevice(&d));
    int i;
    for(i=0;i<Caffe::GPUs.size();i++)
    {
        if(GPUs[i]==d)
            break;
		}
    if(i == Caffe::GPUs.size())
        LOG(FATAL)<< "wrong device"<<'\n';

    cublasHandle_t h = Get().cublas_handle_[i];
    return h;
}

cudaStream_t Caffe::parallel_stream(int i)
{ 
    cudaStream_t s = Get().parallel_stream_[i];
    return s;
}

ncclComm_t Caffe::comms(int i)
{ 
    ncclComm_t c = Get().comms_[i];
    return c;
}

void Caffe::SetDevice(const int device_id) 
{
    int current_device;
    CUDA_CHECK(cudaGetDevice(&current_device));
    if (current_device == device_id) 
        return;
    
    // The call to cudaSetDevice must come before any calls to Get, which
    // may perform initialization using the GPU.
    CUDA_CHECK(cudaSetDevice(device_id));

    int i;
    for(i=0;i<Caffe::GPUs.size();i++)
    {
        if(GPUs[i]==device_id)
            break;
    }
    if (Get().cublas_handle_[i]) 
    		CUBLAS_CHECK(cublasDestroy(Get().cublas_handle_[i]));
    if (Get().curand_generator_[i]) 
    		CURAND_CHECK(curandDestroyGenerator(Get().curand_generator_[i]));

    CUBLAS_CHECK(cublasCreate(&Get().cublas_handle_[i]));
    CURAND_CHECK(curandCreateGenerator(&Get().curand_generator_[i],CURAND_RNG_PSEUDO_DEFAULT));
    CURAND_CHECK(curandSetPseudoRandomGeneratorSeed(Get().curand_generator_[i],cluster_seedgen()));
}
//----------------------------------------

curandGenerator_t Caffe::curand_generator() 
{
    int d;
    CUDA_CHECK(cudaGetDevice(&d));
    int i;
    for(i=0;i<Caffe::GPUs.size();i++)
    {
        if(GPUs[i]==d)
            break;
    }        
    if(i == Caffe::GPUs.size())
        LOG(FATAL)<< "wrong device"<<'\n';
    curandGenerator_t h = Get().curand_generator_[i];
    return h;
}
void Caffe::set_random_seed(const unsigned int seed) {
    // Curand seed
    static bool g_curand_availability_logged = false;
    if (Get().curand_generator())
    {
        CURAND_CHECK(curandSetPseudoRandomGeneratorSeed(curand_generator(), seed));
        CURAND_CHECK(curandSetGeneratorOffset(curand_generator(), 0));
    }
    else
    {
        if (!g_curand_availability_logged)
        {
            LOG(ERROR) << "Curand not available. Skipping setting the curand seed.";
            g_curand_availability_logged = true;
        }
    }
    // RNG seed
    Get().random_generator_.reset(new RNG(seed));
}
//----------------------------------------------------------------------------------------------
class Caffe::RNG::Generator {
public:
    Generator() : rng_(new caffe::rng_t(cluster_seedgen())) {}
    explicit Generator(unsigned int seed) : rng_(new caffe::rng_t(seed)) {}
    caffe::rng_t* rng() 
    { 
    	return rng_.get(); 
    }
private:
    shared_ptr<caffe::rng_t> rng_;
};
Caffe::RNG::RNG() : generator_(new Generator()) { }
Caffe::RNG::RNG(unsigned int seed) : generator_(new Generator(seed)) { }
Caffe::RNG& Caffe::RNG::operator=(const RNG& other) 
{
    generator_.reset(other.generator_.get());
    return *this;
}
void* Caffe::RNG::generator() 
{
    return static_cast<void*>(generator_->rng());
}
//----------------------------------------------------------------------------------------
const char* cublasGetErrorString(cublasStatus_t error) {
    switch (error) {
    case CUBLAS_STATUS_SUCCESS:
        return "CUBLAS_STATUS_SUCCESS";
    case CUBLAS_STATUS_NOT_INITIALIZED:
        return "CUBLAS_STATUS_NOT_INITIALIZED";
    case CUBLAS_STATUS_ALLOC_FAILED:
        return "CUBLAS_STATUS_ALLOC_FAILED";
    case CUBLAS_STATUS_INVALID_VALUE:
        return "CUBLAS_STATUS_INVALID_VALUE";
    case CUBLAS_STATUS_ARCH_MISMATCH:
        return "CUBLAS_STATUS_ARCH_MISMATCH";
    case CUBLAS_STATUS_MAPPING_ERROR:
        return "CUBLAS_STATUS_MAPPING_ERROR";
    case CUBLAS_STATUS_EXECUTION_FAILED:
        return "CUBLAS_STATUS_EXECUTION_FAILED";
    case CUBLAS_STATUS_INTERNAL_ERROR:
        return "CUBLAS_STATUS_INTERNAL_ERROR";
#if CUDA_VERSION >= 6000
    case CUBLAS_STATUS_NOT_SUPPORTED:
        return "CUBLAS_STATUS_NOT_SUPPORTED";
#endif
#if CUDA_VERSION >= 6050
    case CUBLAS_STATUS_LICENSE_ERROR:
        return "CUBLAS_STATUS_LICENSE_ERROR";
#endif
    }
    return "Unknown cublas status";
}

const char* curandGetErrorString(curandStatus_t error) {
    switch (error) {
    case CURAND_STATUS_SUCCESS:
        return "CURAND_STATUS_SUCCESS";
    case CURAND_STATUS_VERSION_MISMATCH:
        return "CURAND_STATUS_VERSION_MISMATCH";
    case CURAND_STATUS_NOT_INITIALIZED:
        return "CURAND_STATUS_NOT_INITIALIZED";
    case CURAND_STATUS_ALLOCATION_FAILED:
        return "CURAND_STATUS_ALLOCATION_FAILED";
    case CURAND_STATUS_TYPE_ERROR:
        return "CURAND_STATUS_TYPE_ERROR";
    case CURAND_STATUS_OUT_OF_RANGE:
        return "CURAND_STATUS_OUT_OF_RANGE";
    case CURAND_STATUS_LENGTH_NOT_MULTIPLE:
        return "CURAND_STATUS_LENGTH_NOT_MULTIPLE";
    case CURAND_STATUS_DOUBLE_PRECISION_REQUIRED:
        return "CURAND_STATUS_DOUBLE_PRECISION_REQUIRED";
    case CURAND_STATUS_LAUNCH_FAILURE:
        return "CURAND_STATUS_LAUNCH_FAILURE";
    case CURAND_STATUS_PREEXISTING_FAILURE:
        return "CURAND_STATUS_PREEXISTING_FAILURE";
    case CURAND_STATUS_INITIALIZATION_FAILED:
        return "CURAND_STATUS_INITIALIZATION_FAILED";
    case CURAND_STATUS_ARCH_MISMATCH:
        return "CURAND_STATUS_ARCH_MISMATCH";
    case CURAND_STATUS_INTERNAL_ERROR:
        return "CURAND_STATUS_INTERNAL_ERROR";
    }
    return "Unknown curand status";
}


#endif  // CPU_ONLY

}  // namespace caffe
