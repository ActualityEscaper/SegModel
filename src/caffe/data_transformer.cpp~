#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/highgui/highgui_c.h>


#include <string>
#include <vector>


#include "caffe/data_transformer.hpp"
#include "caffe/util/io.hpp"
#include "caffe/util/math_functions.hpp"
#include "caffe/util/rng.hpp"

namespace caffe {

template<typename Dtype>
DataTransformer<Dtype>::DataTransformer(const TransformationParameter& param): param_(param)
{
  // check if we want to use mean_value
  if (param_.mean_value_size() > 0) 
  {  
    for (int c = 0; c < param_.mean_value_size(); ++c) 
      mean_values_.push_back(param_.mean_value(c));
  }
}
template<typename Dtype>
void DataTransformer<Dtype>::TransformParse(const cv::Mat& cv_img, std::vector<Dtype> label, Blob<Dtype>* transformed_data_blob, Blob<Dtype>* transformed_label_blob)
{
	int img_height, img_width;
	img_height = cv_img.rows;
	img_width = cv_img.cols;
	CHECK_EQ(int(cv_img.channels()),3);
	
	int crop_width = param_.crop_width();
	int crop_height = param_.crop_height();
	
	
	int width, height;
	Dtype ratio;
  if (Dtype(crop_height) / Dtype(img_height)  <  Dtype(crop_width) / Dtype(img_width))
  {
  	height = crop_height;
  	ratio = Dtype(crop_height) / Dtype(img_height);
  	width  = floor(ratio * Dtype(img_width));
  }
  else
  {
  	ratio = Dtype(crop_width) / Dtype(img_width);
  	height = floor(ratio * Dtype(img_height));
  	width  = crop_width;
  }
  cv::Mat cv_resize_img;
  cv::resize(cv_img,cv_resize_img,cv::Size(width,height),0,0,CV_INTER_CUBIC);
  
  
  unsigned int b= 0;
	unsigned int g= 0;
	unsigned int r= 0;
	cv::Mat cv_padded_img;
	cv::copyMakeBorder(cv_resize_img, cv_padded_img, 
													0, crop_height - height, 0, crop_width - width, cv::BORDER_CONSTANT,
		                      cv::Scalar(b,g,r) );
	
	//LOG(INFO)<<cv_padded_img.cols<<" "<<cv_padded_img.rows;
	
		
  bool do_mirror =  param_.mirror() && Rand(2);
  
  Dtype w_off = 0;
  Dtype h_off = 0;
  //int w_off = Rand(width - crop_width + 1);
  //int h_off = Rand(height - crop_height + 1);
           
        
	//cv::Rect roi(w_off, h_off, crop_width, crop_height);
  //cv::Mat cv_cropped_img = cv_padded_img(roi);
  
  const unsigned char * img_ptr;
  int top_index;
  
  Dtype* transformed_data  = transformed_data_blob->mutable_cpu_data();
//--------------------------------- image --------------------------  
	for (int h = 0; h < crop_height; ++h)
	{
		img_ptr = cv_padded_img.ptr<uchar>(h);
		int img_index = 0;
		int label_index = 0;

		for (int w = 0; w < crop_width; ++w)
			for (int c = 0; c < 3; ++c)
			{
				if (do_mirror)
					top_index = (c * crop_height + h) * crop_width + (crop_width - 1 - w);
				else
					top_index = (c * crop_height + h) * crop_width + w;

				Dtype pixel = static_cast<Dtype>(img_ptr[img_index++]);
				transformed_data[top_index] =pixel;
			}
	}
//----------------------------------- label --------------------------
	Dtype* transformed_label = transformed_label_blob->mutable_cpu_data();
	//----gender
	transformed_label[0]=label[0];	
	//----hairlength
	transformed_label[1]=label[1];	
	//----head
	int iter;
	Dtype coeff = 10.0;
	{	
		iter = 2;
		if (do_mirror)
		{
			transformed_label[iter+0]=(1 - Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+2]=(1 - Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}
		else
		{
			transformed_label[iter+0]=Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+2]=Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}		
	}
	//----top
	transformed_label[6]=label[6];	
	transformed_label[7]=label[7];	
	{	
		iter = 8;
		if (do_mirror)
		{
			transformed_label[iter+0]=(1 - Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+2]=(1 - Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}
		else
		{
			transformed_label[iter+0]=Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+2]=Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}		
	}
	//----down
	transformed_label[12]=label[12];	
	transformed_label[13]=label[13];	
	{	
		iter = 14;
		if (do_mirror)
		{
			transformed_label[iter+0]=(1 - Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+2]=(1 - Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}
		else
		{
			transformed_label[iter+0]=Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+2]=Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}		
	}
	//----shoes
	transformed_label[18]=label[18];	
	transformed_label[19]=label[19];	
	{	
		iter = 20;
		if (do_mirror)
		{
			transformed_label[iter+0]=(1 - Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+2]=(1 - Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			
			transformed_label[iter+4]=(1 - Dtype(floor(label[iter+6]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+5]=Dtype(floor(label[iter+5]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+6]=(1 - Dtype(floor(label[iter+4]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+7]=Dtype(floor(label[iter+7]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}
		else
		{
			transformed_label[iter+0]=Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+2]=Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			
			transformed_label[iter+4]=Dtype(floor(label[iter+4]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+5]=Dtype(floor(label[iter+5]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+6]=Dtype(floor(label[iter+6]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+7]=Dtype(floor(label[iter+7]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}		
	}
	//----hat 
	{	
		iter = 28;
		if (do_mirror)
		{
			transformed_label[iter+0]=(1 - Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+2]=(1 - Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}
		else
		{
			//LOG(INFO)<<label[iter+0]<<" "<<ratio<<" "<<crop_width;
			transformed_label[iter+0]=Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+2]=Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}		
	}	
	//----bag
	transformed_label[28]=label[28];	
	transformed_label[29]=label[29];	
	{	
		iter = 30;
		if (do_mirror)
		{
			transformed_label[iter+0]=(1 - Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width)) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;	
			transformed_label[iter+2]=(1 - Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width)) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}
		else
		{
			//LOG(INFO)<<label[iter+0]<<" "<<ratio<<" "<<crop_width;
			transformed_label[iter+0]=Dtype(floor(label[iter+0]*ratio) - w_off) / Dtype(crop_width) * coeff;	
			transformed_label[iter+1]=Dtype(floor(label[iter+1]*ratio) - h_off) / Dtype(crop_height) * coeff;		
			transformed_label[iter+2]=Dtype(floor(label[iter+2]*ratio) - w_off) / Dtype(crop_width) * coeff;		
			transformed_label[iter+3]=Dtype(floor(label[iter+3]*ratio) - h_off) / Dtype(crop_height) * coeff;	
		}		
	}	

	for (int i=0;i<label.size();i++)
	{
		if (label[i] == -1)
			transformed_label[i] = -1;
	}
	//FILE *fid = fopen("debug","wb");
	//fwrite(transformed_data,sizeof(Dtype),transformed_data_blob->count(),fid);
	//fclose(fid);
	//LOG(FATAL)<<"written ";
	//for (int i=2;i<6;i++)
	//	LOG(INFO)<<transformed_label[i];
	//LOG(INFO)<<"-------------------------";
#if 0
	for (int i=0;i<label.size();i++)
	{
		if (transformed_label[i]<0 && transformed_label[i] != -1)
		{
			LOG(INFO)<<" height = "<<height<<" width = "<<width<<" ratio = "<<ratio;
			LOG(INFO)<<" i = "<<i<<", "<<label[i]<<", img_height = "<<img_height<<", img_width = "<<img_width;
			LOG(FATAL)<<transformed_label[i]<<" "<<label[i-2]<<" "<<label[i+2];
		}	
	}
#endif
	//LOG(INFO)<<transformed_label[2];
}

template<typename Dtype>
void DataTransformer<Dtype>::Transform(const cv::Mat& cv_img, Blob<Dtype>* transformed_blob)
{
  const int crop_size = param_.crop_size();
  const bool alter_color = param_.alter_color();
  const bool pad_img = param_.pad_img();
  const int img_channels = cv_img.channels();
  int img_height = cv_img.rows;
  int img_width = cv_img.cols;

  // Check dimensions.
  const int num = transformed_blob->num();
  const int channels = transformed_blob->channels();
  const int height = transformed_blob->height();
  const int width = transformed_blob->width();


  const bool do_mirror = param_.mirror() && Rand(2);
  
  vector<bool> do_alter_color;
  do_alter_color.resize(3);
  if (alter_color)
  {
  	for(int i=0;i<do_alter_color.size();i++)
    	do_alter_color[i]=true; 
  }
	else
	{
		for(int i=0;i<do_alter_color.size();i++)
    	do_alter_color[i]=false; 
	}
	vector<int> alter_color_value;
  alter_color_value.resize(3);
  alter_color_value[0]=0;
  alter_color_value[1]=0;
  alter_color_value[2]=0;
#if 1
	Dtype a0,a1,a2;
	caffe_rng_gaussian<Dtype>(1, Dtype(0), Dtype(0.1), &a0);
	caffe_rng_gaussian<Dtype>(1, Dtype(0), Dtype(0.1), &a1);
	caffe_rng_gaussian<Dtype>(1, Dtype(0), Dtype(0.1), &a2);
	Dtype range = 1000;
	alter_color_value[0] = a0 * 0.2175 *  0.4009 * range + a1 * 0.0188 * -0.8140 * range + a2 * 0.0045 *  0.4203 * range;
	alter_color_value[1] = a0 * 0.2175 *  0.7192 * range + a1 * 0.0188 * -0.0045 * range + a2 * 0.0045 * -0.6948 * range;
	alter_color_value[2] = a0 * 0.2175 * -0.5675 * range + a1 * 0.0188 * -0.5808 * range + a2 * 0.0045 * -0.5836 * range;
#else  
  //for(int i=0;i<alter_color_value.size();i++)
  //  alter_color_value[i]=Rand(40)-20;
#endif
	
	unsigned int b= mean_values_[0];
	unsigned int g= mean_values_[1];
	unsigned int r= mean_values_[2];

	
	//multi-thread seems to have trouble with opencv's functions
	cv::Mat cv_padded_img = cv_img; 
	if (pad_img)
	{	
		cv::copyMakeBorder(cv_img, cv_padded_img, 
													4, 4, 4, 4, cv::BORDER_CONSTANT,
		                      cv::Scalar(b,g,r) );
		img_height = cv_padded_img.rows;
		img_width = cv_padded_img.cols;
  }                   

  int h_off = 0;
  int w_off = 0;
  cv::Mat cv_cropped_img;
  if (crop_size)
  {
    CHECK_EQ(crop_size, height);
    CHECK_EQ(crop_size, width);
    // We only do random crop when we do training.
    if (Caffe::phase() == TRAIN)
    {
      h_off = Rand(img_height - crop_size + 1);
      w_off = Rand(img_width - crop_size + 1);
    }
    else
    {
      h_off = (img_height - crop_size) / 2;
      w_off = (img_width - crop_size) / 2;
    }
    cv::Rect roi(w_off, h_off, crop_size, crop_size);
    cv_cropped_img = cv_padded_img(roi);
  }
  else
  {
    CHECK_EQ(img_height, height);
    CHECK_EQ(img_width, width);
  }
	//LOG(INFO)<<"w_off = "<<w_off<<"crop_size = "<<crop_size<<" img_height = "<<img_height;
  CHECK(cv_cropped_img.data);

  Dtype* transformed_data = transformed_blob->mutable_cpu_data();
  int top_index;
  
  if (Caffe::phase() == TRAIN)
  {
    for (int h = 0; h < height; ++h)
    {
      const uchar* ptr = cv_cropped_img.ptr<uchar>(h);
      int img_index = 0;
      for (int w = 0; w < width; ++w)
        for (int c = 0; c < img_channels; ++c)
        {
          if (do_mirror)
            top_index = (c * height + h) * width + (width - 1 - w);
          else
            top_index = (c * height + h) * width + w;

          Dtype pixel = static_cast<Dtype>(ptr[img_index++]);
          if(do_alter_color[c])
            transformed_data[top_index] = pixel - mean_values_[c] + alter_color_value[c];
          else
            transformed_data[top_index] = pixel - mean_values_[c];
        }

    }
  }
  else
  {
    for (int h = 0; h < height; ++h)
    {
      const uchar* ptr = cv_cropped_img.ptr<uchar>(h);
      int img_index = 0;
      for (int w = 0; w < width; ++w)
        for (int c = 0; c < img_channels; ++c)
        {
          if (do_mirror)
            top_index = (c * height + h) * width + (width - 1 - w);
          else
            top_index = (c * height + h) * width + w;

          Dtype pixel = static_cast<Dtype>(ptr[img_index++]);
          transformed_data[top_index] = pixel - mean_values_[c];
        }
    }
  }
}

template<typename Dtype>
void DataTransformer<Dtype>::TransformImgAndSeg(const std::vector<cv::Mat>& cv_img_seg,
                                                Blob<Dtype>* transformed_data_blob, Blob<Dtype>* transformed_label_blob, const int ignore_label)
{
  CHECK(cv_img_seg.size() == 2) << "Input must contain image and seg.";

  const int img_channels = cv_img_seg[0].channels();
  // height and width may change due to pad for cropping
  int img_height   = cv_img_seg[0].rows;
  int img_width    = cv_img_seg[0].cols;

  const int seg_channels = cv_img_seg[1].channels();
  int seg_height   = cv_img_seg[1].rows;
  int seg_width    = cv_img_seg[1].cols;
  
	CHECK_EQ(img_height,seg_height);
	CHECK_EQ(img_width,seg_width);

	

  const int data_channels = transformed_data_blob->channels();
  const int data_height   = transformed_data_blob->height();
  const int data_width    = transformed_data_blob->width();


  const int label_channels = transformed_label_blob->channels();
  const int label_height   = transformed_label_blob->height();
  const int label_width    = transformed_label_blob->width();
	
	CHECK_EQ(data_height,label_height);
	CHECK_EQ(data_width, label_width);
	CHECK_EQ(label_channels,1);

  int crop_size = param_.crop_size();
  bool do_mirror =  param_.mirror() && Rand(2);

	
  vector<bool> do_alter_color;
  do_alter_color.resize(3);
  for(int i=0;i<do_alter_color.size();i++)
    do_alter_color[i]=Rand(2);
  vector<int> alter_color_value;
  alter_color_value.resize(3);
  for(int i=0;i<alter_color_value.size();i++)
    alter_color_value[i]=Rand(40)-20;


  int h_off = 0;
  int w_off = 0;
  cv::Mat cv_cropped_img = cv_img_seg[0];
  cv::Mat cv_cropped_seg = cv_img_seg[1];
  
  // transform to double, since we will pad mean pixel values
  cv_cropped_img.convertTo(cv_cropped_img, CV_64F);

  // Check if we need to pad img to fit for crop_size
  // copymakeborder
  if(crop_size == 0)
  {
    int pad_height = data_height - img_height;
    int pad_width = data_width - img_width;
    if (pad_height > 0 || pad_width > 0)
    {
      cv::copyMakeBorder(cv_cropped_img, cv_cropped_img, 0, pad_height,
                         0, pad_width, cv::BORDER_CONSTANT,
                         cv::Scalar(mean_values_[0], mean_values_[1], mean_values_[2]));
      cv::copyMakeBorder(cv_cropped_seg, cv_cropped_seg, 0, pad_height,
                         0, pad_width, cv::BORDER_CONSTANT,
                         cv::Scalar(ignore_label));
      // update height/width
      img_height   = cv_cropped_img.rows;
      img_width    = cv_cropped_img.cols;

      seg_height   = cv_cropped_seg.rows;
      seg_width    = cv_cropped_seg.cols;
    }
  }
  else
  {
    int pad_height = std::max(crop_size - img_height, 0);
    int pad_width  = std::max(crop_size - img_width, 0);
    if (pad_height > 0 || pad_width > 0)
    {
      cv::copyMakeBorder(cv_cropped_img, cv_cropped_img, 0, pad_height,
                         0, pad_width, cv::BORDER_CONSTANT,
                         cv::Scalar(mean_values_[0], mean_values_[1], mean_values_[2]));
      cv::copyMakeBorder(cv_cropped_seg, cv_cropped_seg, 0, pad_height,
                         0, pad_width, cv::BORDER_CONSTANT,
                         cv::Scalar(ignore_label));

      img_height   = cv_cropped_img.rows;
      img_width    = cv_cropped_img.cols;
    }

    h_off = Rand(img_height - crop_size + 1);
    w_off = Rand(img_width - crop_size + 1);
    
    cv::Rect roi(w_off, h_off, crop_size, crop_size);
    cv_cropped_img = cv_cropped_img(roi);
    cv_cropped_seg = cv_cropped_seg(roi);
  }

  
  

  Dtype* transformed_data  = transformed_data_blob->mutable_cpu_data();
  Dtype* transformed_label = transformed_label_blob->mutable_cpu_data();

  int top_index;
  const double* data_ptr;
  const uchar* label_ptr;

  if (Caffe::phase() == TRAIN)
  {
    for (int h = 0; h < data_height; ++h)
    {
      data_ptr = cv_cropped_img.ptr<double>(h);
      label_ptr = cv_cropped_seg.ptr<uchar>(h);
      int data_index = 0;
      int label_index = 0;

      for (int w = 0; w < data_width; ++w)
      {
        // for image
        for (int c = 0; c < img_channels; ++c)
        {
          if (do_mirror)
            top_index = (c * data_height + h) * data_width + (data_width - 1 - w);
          else
            top_index = (c * data_height + h) * data_width + w;

          Dtype pixel = static_cast<Dtype>(data_ptr[data_index++]);

          if(do_alter_color[c])
            transformed_data[top_index] =pixel - mean_values_[c] + alter_color_value[c];
          else
            transformed_data[top_index] =pixel - mean_values_[c];
        }

        // for segmentation
        if (do_mirror)
          top_index = h * data_width + data_width - 1 - w;
        else
          top_index = h * data_width + w;

        Dtype pixel = static_cast<Dtype>(label_ptr[label_index++]);
        transformed_label[top_index] = pixel;
      }
    }
  }
  else
  {
    for (int h = 0; h < data_height; ++h)
    {
      data_ptr = cv_cropped_img.ptr<double>(h);
      label_ptr = cv_cropped_seg.ptr<uchar>(h);
      int data_index = 0;
      int label_index = 0;

      for (int w = 0; w < data_width; ++w)
      {
        // for image
        for (int c = 0; c < img_channels; ++c)
        {
          if (do_mirror)
            top_index = (c * data_height + h) * data_width + (data_width - 1 - w);
          else
            top_index = (c * data_height + h) * data_width + w;

          Dtype pixel = static_cast<Dtype>(data_ptr[data_index++]);
          transformed_data[top_index] =pixel - mean_values_[c];
        }

        // for segmentation
        if (do_mirror)
          top_index = h * data_width + data_width - 1 - w;
        else
          top_index = h * data_width + w;

        Dtype pixel = static_cast<Dtype>(label_ptr[label_index++]);
        transformed_label[top_index] = pixel;
      }
    }
  }
}




template <typename Dtype>
void DataTransformer<Dtype>::InitRand() 
{
  const unsigned int rng_seed = caffe_rng_rand();
  rng_.reset(new Caffe::RNG(rng_seed));
}

template <typename Dtype>
int DataTransformer<Dtype>::Rand(int n) {
  CHECK(rng_);
  CHECK_GT(n, 0);
  caffe::rng_t* rng = static_cast<caffe::rng_t*>(rng_->generator());
  return ((*rng)() % n);
}

INSTANTIATE_CLASS(DataTransformer);

}  // namespace caffe
