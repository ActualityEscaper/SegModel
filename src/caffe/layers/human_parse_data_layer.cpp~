#include <fstream>  // NOLINT(readability/streams)
#include <iostream>  // NOLINT(readability/streams)
#include <string>
#include <utility>
#include <vector>
#include <algorithm>

#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/highgui/highgui_c.h>

#include "caffe/layers/human_parse_data_layer.hpp"
#include "caffe/layer.hpp"
#include "caffe/util/benchmark.hpp"
#include "caffe/util/io.hpp"
#include "caffe/util/math_functions.hpp"
#include "caffe/util/rng.hpp"


namespace caffe {

template <typename Dtype>
void HumanParseDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
  TransformationParameter transform_param = this->layer_param_.transform_param();
  DataParameter image_data_param    = this->layer_param_.data_param();
  const int batch_size = image_data_param.batch_size();
  const int crop_width  = transform_param.crop_width();
  const int crop_height = transform_param.crop_height();

  // Read the file with filenames and labels
  const string& source = image_data_param.source();
  LOG(INFO) << "Opening file " << source;
  std::ifstream infile(source.c_str());

  string linestr;
  while (std::getline(infile, linestr))
  {
    std::istringstream iss(linestr);
    string imgfn;
    iss >> imgfn;
    string segfn = imgfn;
    imgfn = "JPEGImages/" + imgfn + ".jpg";
    lines_.push_back(std::make_pair(imgfn, segfn));
  }

  if (image_data_param.shuffle()) 
  {
    // randomly shuffle data
    LOG(INFO) << "Shuffling data";
    const unsigned int prefetch_rng_seed = caffe_rng_rand();
    prefetch_rng_.reset(new Caffe::RNG(prefetch_rng_seed));
    ShuffleImages();
  }
  LOG(INFO) << "A total of " << lines_.size() << " images.";
  lines_id_ = 0;


  
  top[0]->Reshape(batch_size, 3, crop_height,crop_width);
  this->prefetch_data_.Reshape(batch_size, 3, crop_height, crop_width);
  top[1]->Reshape(batch_size, 38, 1, 1);
  this->prefetch_label_.Reshape(batch_size, 38, 1, 1);
  
  this->transformed_data_.Reshape(1, 3, crop_height, crop_width);
  this->transformed_label_.Reshape(1, 38, 1, 1);
}
// This function is used to create a thread that prefetches the data.
template <typename Dtype>
void HumanParseDataLayer<Dtype>::InternalThreadEntry()
{
  //new thread treat GPU 0 as default device, so it is necessary to set device in case of
  //ghost memory
#ifndef CPU_ONLY
  CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));
#endif
  DataParameter image_data_param    = this->layer_param_.data_param();
  TransformationParameter transform_param = this->layer_param_.transform_param();
  string root_folder   = image_data_param.root_folder();
  int batch_size = image_data_param.batch_size();
  int crop_height = transform_param.crop_height();
	int crop_width  = transform_param.crop_width();

  const int lines_size = lines_.size();

  for(int item_id=0;item_id < batch_size;item_id++)
  {
    cv::Mat cv_img;

    CHECK_GT(lines_size, lines_id_);
    cv_img = cv::imread(root_folder + "humanparse/" + "JPEGImages/" + lines_[lines_id_].second + ".jpg", CV_LOAD_IMAGE_COLOR);
    if (!cv_img.data) {LOG(FATAL) << "Fail to load img: " << root_folder + lines_[lines_id_].first;}
    
    std::vector<Dtype> label;
    label.resize(38);
    
    string txtname = root_folder + "humanparse/" + "SegmentationClass/" + lines_[lines_id_].second + ".txt";
    FILE * fid = fopen(txtname.c_str(),"r");
  	
  	int temp;
    for(int i=0;i<38;i++)
    {
    	fscanf(fid,"%d",&temp);
    	label[i] = temp;
    }
    fclose(fid);
    
    
		//LOG(INFO)<<lines_[lines_id_].second;
   
    this->transformed_data_.set_cpu_data(this->prefetch_data_.mutable_cpu_data()+this->prefetch_data_.offset(item_id));
    this->transformed_label_.set_cpu_data(this->prefetch_label_.mutable_cpu_data()+this->prefetch_label_.offset(item_id));
    
    this->data_transformer_->TransformParse(cv_img,label, &(this->transformed_data_), &(this->transformed_label_));    
    
 
  
    lines_id_++;
    if (lines_id_ >= lines_size)
    {
      lines_id_ = 0;
      if (image_data_param.shuffle())
        ShuffleImages();
    }
  }
}

template <typename Dtype>
HumanParseDataLayer<Dtype>::~HumanParseDataLayer<Dtype>() 
{
  if (this->thread_.get() != NULL && this->thread_->joinable())
    this->thread_->join();
}

template <typename Dtype>
void HumanParseDataLayer<Dtype>::ShuffleImages() 
{
  caffe::rng_t* prefetch_rng = static_cast<caffe::rng_t*>(prefetch_rng_->generator());
  shuffle(lines_.begin(), lines_.end(), prefetch_rng);
}

INSTANTIATE_CLASS(HumanParseDataLayer);
REGISTER_LAYER_CLASS(HumanParseData);
}  // namespace caffe
