#include <vector>

#include "caffe/layers/base_data_layer.hpp"

namespace caffe {



template <typename Dtype>
void BaseDataLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
 
  // wait until the end of the thread
  if (thread_.get() != NULL && thread_->joinable())
  	thread_->join(); 
  
  top[0]->Reshape(this->prefetch_data_.num(),this->prefetch_data_.channels(),this->prefetch_data_.height(),this->prefetch_data_.width());
  caffe_copy(prefetch_data_.count(), prefetch_data_.cpu_data(), top[0]->mutable_gpu_data());
   
  top[1]->Reshape(prefetch_label_.num(),prefetch_label_.channels(),prefetch_label_.height(),prefetch_label_.width());
  caffe_copy(prefetch_label_.count(), prefetch_label_.cpu_data(),top[1]->mutable_gpu_data());
  
  LOG(INFO)<<top[1]->cpu_data()[0];
   
  this->data_transformer_->InitRand();
  thread_.reset(new boost::thread(&BaseDataLayer<Dtype>::InternalThreadEntry, this));
}

template <typename Dtype>
void BaseDataLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom)
{
}

INSTANTIATE_LAYER_GPU_FUNCS(BaseDataLayer);
}  // namespace caffe
