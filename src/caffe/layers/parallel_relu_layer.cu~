#include <algorithm>
#include <vector>

#include "caffe/layers/parallel_relu_layer.hpp"

namespace caffe {

template <typename Dtype>
__global__ void ReLUForward(const int n, const Dtype* in, bool* flag, Dtype* out) 
{
  CUDA_KERNEL_LOOP(index, n) 
  {
  	flag[index] = in[index] > 0;
    out[index] = in[index] > 0 ? in[index] : 0;
  }
}

template <typename Dtype>
__global__ void ReLUForward_test(const int n, const Dtype* in, Dtype* out) 
{
  CUDA_KERNEL_LOOP(index, n) 
  {
    out[index] = in[index] > 0 ? in[index] : 0;
  }
}

template <typename Dtype>
void ReLULayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{

	for(int i=0;i<bottom.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		const Dtype* bottom_data = bottom[i]->gpu_data();
		Dtype* top_data = top[i]->mutable_gpu_data();
		const int count = bottom[i]->count();

		bool* flag_data = parallel_flag[i]->mutable_gpu_data();
		ReLUForward<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>
		(count, bottom_data, flag_data,top_data);
		CUDA_POST_KERNEL_CHECK; 
	}
	
	for(int i=0;i<bottom.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		CUDA_CHECK(cudaDeviceSynchronize());
	}	
  CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));
}

template <typename Dtype>
__global__ void ReLUBackward(const int n, const Dtype* in_diff,const bool* flag, Dtype* out_diff) 
{
  CUDA_KERNEL_LOOP(index, n)
  {
    out_diff[index] = in_diff[index] * flag[index];
  }
}

template <typename Dtype>
void ReLULayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{  
	for(int i=0;i<bottom.size();i++)
	{
		const Dtype* top_diff = top[i]->gpu_diff();
		const bool* flag_data = parallel_flag[i]->gpu_data();
		Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
		const int count = bottom[i]->count();

		ReLUBackward<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>
		(count, top_diff, flag_data, bottom_diff);
		CUDA_POST_KERNEL_CHECK;       
  }
  
  for(int i=0;i<bottom.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		CUDA_CHECK(cudaDeviceSynchronize());
	}	
  CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));
}


INSTANTIATE_LAYER_GPU_FUNCS(ParallelReLULayer);


}  // namespace caffe
