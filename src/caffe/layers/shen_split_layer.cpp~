#include <vector>

#include "caffe/layers/shen_split_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
void ShenSplitLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
}

template <typename Dtype>
void ShenSplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
  CHECK_GE(top.size(),1);

  for (int i = 1; i < top.size(); ++i)
    top[i]->ReshapeLike(*bottom[0]);
}

template <typename Dtype>
void ShenSplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
  for (int i = 1; i < top.size(); ++i)
    caffe_copy(top[i]->count(),bottom[0]->cpu_data(),top[i]->mutable_cpu_data());
  
}

template <typename Dtype>
void ShenSplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{

  caffe_add(bottom[0]->count(), top[0]->cpu_diff(), top[1]->cpu_diff(), bottom[0]->mutable_cpu_diff());
  for (int i = 2; i < top.size(); ++i)
  {
    const Dtype* top_diff = top[i]->cpu_diff();
    Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
    caffe_axpy(bottom[0]->count(), Dtype(1.), top_diff, bottom_diff);
  }
}


#ifdef CPU_ONLY
STUB_GPU(ShenSplitLayer);
#endif

INSTANTIATE_CLASS(ShenSplitLayer);
REGISTER_LAYER_CLASS(ShenSplit);

}  // namespace caffe
