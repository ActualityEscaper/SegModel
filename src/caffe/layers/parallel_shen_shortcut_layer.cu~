#include <vector>

#include "caffe/layers/parallel_shen_shortcut_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {


template <typename Dtype>
void ParallelShenShortcutLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{	

	this->blobs_[0]->mutable_cpu_data()[0] = std::max(this->blobs_[0]->cpu_data()[0],-Dtype(1)); 
	this->blobs_[0]->mutable_cpu_data()[0] = std::min(this->blobs_[0]->cpu_data()[0],Dtype(1));
	multiplier = this->blobs_[0]->cpu_data()[0];
	caffe_rng_bernoulli(1, Dtype(1. - dropout_ratio_), &mask);
	multiplier = multiplier * mask * 1. / (1. - dropout_ratio_); 
	
	for(int i=0;i<top.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		caffe_gpu_add(bottom[i]->count(),Dtype(1),bottom[i]->gpu_data(), multiplier,bottom[i+top.size()]->gpu_data(),
																	 top[i]->mutable_gpu_data());		
	}
															 
	for(int i=0;i<top.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		CUDA_CHECK(cudaDeviceSynchronize());
	}	
  CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));																 
}

template <typename Dtype>
void ParallelShenShortcutLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{
	for(int i=0;i<top.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
    
    parallel_lambda[i]->Reshape(bottom[0]->num(), bottom[0]->channels(), bottom[0]->height(), bottom[0]->width());
		parallel_all_one[i]->ReshapeLike(*parallel_lambda[i]);
		caffe_gpu_set(parallel_all_one[i]->count(),Dtype(1.0),parallel_all_one[i]->mutable_gpu_data());
    
		caffe_copy(top[i]->count(),top[i]->gpu_diff(),bottom[i+top.size()]->mutable_gpu_diff());
		caffe_gpu_scal(bottom[i+top.size()]->count(), multiplier,bottom[i+top.size()]->mutable_gpu_diff());
		
		if (mask == 1 && this->lr_mult()[0] != 0)
		{
			caffe_gpu_mul(top[i]->count(),top[i]->gpu_diff(),bottom[i+top.size()]->gpu_data(),parallel_lambda[i]->mutable_gpu_data());
		
			Dtype sum_diff;
		
			caffe_gpu_dot(parallel_lambda[i]->count(),parallel_lambda[i]->gpu_data(),parallel_all_one[i]->gpu_data(),&sum_diff);	
		
			this->blobs_[0]->mutable_cpu_diff()[0] += sum_diff;	
		}		
	}
	
	for(int i=0;i<bottom.size();i++)
	{
    CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		CUDA_CHECK(cudaDeviceSynchronize());
	}	
  CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));
}

INSTANTIATE_LAYER_GPU_FUNCS(ParallelShenShortcutLayer);
}  // namespace caffe
