#include <vector>

#include "caffe/layers/imresize_layer.hpp"
#include "caffe/util/math_functions.hpp"

#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/highgui/highgui_c.h>

namespace caffe {

template <typename Dtype>
void ImresizeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
	stride = this->layer_param().interp_param().stride();
	kernel_size = this->layer_param().interp_param().kernel_size();
	num_classes = this->layer_param().interp_param().num_classes();
}

template <typename Dtype>
void ImresizeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
	int num = bottom[0]->num();
  int height = bottom[0]->height();
  int width = bottom[0]->width();

  
	top[0]->Reshape(num,num_classes,height/stride,width/stride);
	top[1]->Reshape(num,num_classes,height/stride,width/stride);
}

template <typename Dtype>
void ImresizeLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
/*
	int num = bottom[0]->num();
	int channels = bottom[0]->channels();
	int big_height = bottom[0]->height();
  int big_width = bottom[0]->width();
  int height = bottom[1]->height();
  int width = bottom[1]->width();
  
  cv::Mat cv_big_im(big_height,big_width,CV_64F);
	cv::Mat cv_im(height,width,CV_64F);
	const Dtype * bottom_data = bottom[0]->cpu_data();
	Dtype * top_data = top[0]->mutable_cpu_data();
	for (int n=0;n<num;n++)
		for (int c=0;c<channels;c++)
		{
			for (int h = 0; h < big_height; ++h)
		  {
      	Dtype * data_ptr = cv_big_im.ptr<Dtype>(h);
      	for (int w=0;w<big_width;w++)
        	data_ptr[w] = bottom_data[w];
      	bottom_data += big_width;
      }		
      

			cv::resize(cv_big_im,cv_im,cv::Size(width,height),0,0,CV_INTER_NN);
			

			for (int h = 0; h < height; ++h)
		  {
      	const Dtype * data_ptr = cv_im.ptr<Dtype>(h);
      	for (int w=0;w<width;w++)
        	top_data[w] = data_ptr[w];
      	top_data += width;
      }		
    
		}		
*/
}

template <typename Dtype>
void ImresizeLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom)
{
}

#ifdef CPU_ONLY
STUB_GPU(ImresizeLayer);
#endif

INSTANTIATE_CLASS(ImresizeLayer);
REGISTER_LAYER_CLASS(Imresize);
}  // namespace caffe
		
