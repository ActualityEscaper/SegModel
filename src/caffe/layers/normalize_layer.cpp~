#include <vector>
#include "caffe/layers/normalize_layer.hpp"

namespace caffe {

template <typename Dtype>
void NormalizeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
  int num = bottom[0]->num();
  int channels = bottom[0]->channels();
  int height = bottom[0]->height();
  int width = bottom[0]->width();

  buffer_.Reshape(1, channels, height, width);
  buffer_channel_.Reshape(1, channels, 1, 1);
  buffer_spatial_.Reshape(1, 1, height, width);
  norm_.Reshape(num, 1, height, width);
  
  sum_channel_multiplier_.Reshape(1, channels, 1, 1);
  sum_spatial_multiplier_.Reshape(1, 1, height, width);
  
  
  
  
  
#ifndef CPU_ONLY
  caffe_gpu_set(sum_channel_multiplier_.count(), Dtype(1), sum_channel_multiplier_.mutable_gpu_data());
  caffe_gpu_set(sum_spatial_multiplier_.count(), Dtype(1), sum_spatial_multiplier_.mutable_gpu_data());
#endif


	NormalizeParameter norm_param = this->layer_param().norm_param();
  eps_ = norm_param.eps();
  if (this->blobs_.size() > 0) {
    LOG(INFO) << "Skipping parameter initialization";
  }
  else
  {
    this->blobs_.resize(1);
    this->blobs_[0].reset(new Blob<Dtype>(1, channels,1,1));
#ifndef CPU_ONLY
    caffe_gpu_set(this->blobs_[0]->count(),Dtype(norm_param.scale_value()),this->blobs_[0]->mutable_gpu_data());
#endif
		
		if (this->layer_param_.param_size() <= 0)
	  {
	  	this->lr_mult().push_back(1);
	  	this->decay_mult().push_back(1);
	  }	
	  else
	  {
	  	this->lr_mult().push_back(this->layer_param_.param(0).lr_mult());
	  	this->decay_mult().push_back(this->layer_param_.param(0).decay_mult());
	  }
  } 
}

template <typename Dtype>
void NormalizeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
  int num = bottom[0]->num();
  int channels = bottom[0]->channels();
  int height = bottom[0]->height();
  int width = bottom[0]->width();

  top[0]->ReshapeLike(*bottom[0]);
  buffer_.Reshape(1, channels, height, width);

  norm_.Reshape(num, 1, height, width);
  sum_spatial_multiplier_.Reshape(1, 1, height, width);
#ifndef CPU_ONLY
  caffe_gpu_set(sum_spatial_multiplier_.count(), Dtype(1), sum_spatial_multiplier_.mutable_gpu_data());
#endif


  buffer_spatial_.Reshape(1, 1, height, width);  
}

template <typename Dtype>
void NormalizeLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
}

template <typename Dtype>
void NormalizeLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,  const vector<Blob<Dtype>*>& bottom)
{
}


#ifdef CPU_ONLY
STUB_GPU(NormalizeLayer);
#endif

INSTANTIATE_CLASS(NormalizeLayer);
REGISTER_LAYER_CLASS(Normalize);

}  // namespace caffe
