#include <vector> 

#include "caffe/layers/shen_shortcut_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {


template <typename Dtype>
Blob<Dtype> * ShenShortcutLayer<Dtype>::lambda = NULL;

template <typename Dtype>
Blob<Dtype> * ShenShortcutLayer<Dtype>::all_one = NULL;

template <typename Dtype>
void ShenShortcutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
  dropout_ratio_ = this->layer_param_.shortcut_param().dropout_ratio();

  if (this->blobs_.size() > 0)
    LOG(INFO) << "Skipping parameter initialization";
  else
  {
    this->blobs_.resize(1);
    this->blobs_[0].reset(new Blob<Dtype>(1,1,1,1));
    
    Dtype scale = this->layer_param_.shortcut_param().scale();
    this->blobs_[0]->mutable_cpu_data()[0]=Dtype(scale);

		
	  if (this->layer_param_.param_size() > 0 && this->layer_param_.param(0).lr_mult() == -1)
	  {
	  	this->lr_mult().push_back(1);
	  	this->decay_mult().push_back(1);
	  }	
	  else
	  {
	  	this->lr_mult().push_back(this->layer_param_.param(0).lr_mult());
	  	this->decay_mult().push_back(this->layer_param_.param(0).decay_mult());
	  }
	}	
  
  if (lambda == NULL)
   lambda = new Blob<Dtype>();
  if (all_one == NULL)
  	all_one = new Blob<Dtype>();
}	

template <typename Dtype>
void ShenShortcutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
  if (bottom[0]->height() != bottom[1]->height() )
    LOG(FATAL)<<"wrong size";
}

template <typename Dtype>
void ShenShortcutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
}

template <typename Dtype>
void ShenShortcutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom)
{
}

template <typename Dtype>
ShenShortcutLayer<Dtype>::~ShenShortcutLayer()
{
	if (lambda != NULL)
	{
		delete lambda;
		lambda = NULL;
	}
	if (all_one != NULL)
	{
		delete all_one;
		all_one = NULL;
	}
}

#ifdef CPU_ONLY
STUB_GPU(ShenShortcutLayer);
#endif

INSTANTIATE_CLASS(ShenShortcutLayer);
REGISTER_LAYER_CLASS(ShenShortcut);
}  // namespace caffe
