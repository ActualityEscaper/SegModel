#include <vector>

#include "caffe/layers/parallel_shen_split_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {


template <typename Dtype>
void ParallelShenSplitLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{

	for (int i = 0; i < bottom.size(); ++i) 
  {
  	CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
  	//caffe_copy(bottom[i]->count(),bottom[i]->gpu_data(),top[i]->mutable_gpu_data());
  	caffe_copy(bottom[i]->count(),bottom[i]->gpu_data(),top[i+bottom.size()]->mutable_gpu_data());
	}
	for(int i=0;i<bottom.size();i++)
	{
		CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		CUDA_CHECK(cudaDeviceSynchronize());
	}
	CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));
	
}

template <typename Dtype>
void ParallelShenSplitLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{
	for (int i = 0; i < bottom.size(); ++i) 
  {
  	CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
  	
  	caffe_gpu_add(bottom[i]->count(),Dtype(1),top[i]->gpu_diff(),Dtype(1),top[i+bottom.size()]->gpu_diff(),
  																	bottom[i]->mutable_gpu_diff());
	}
	for(int i=0;i<bottom.size();i++)
	{
		CUDA_CHECK(cudaSetDevice(Caffe::GPUs[i]));
		CUDA_CHECK(cudaDeviceSynchronize());
	}
	CUDA_CHECK(cudaSetDevice(Caffe::GPUs[0]));		
}

INSTANTIATE_LAYER_GPU_FUNCS(ParallelShenSplitLayer);


}  // namespace caffe
