// Copyright 2013 Yangqing Jia

#include <vector>

#include "caffe/layer.hpp"
#include "caffe/layers/cudnn_deconv_layer.hpp"
#include "caffe/util/im2col.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

__global__ void sync_conv_groups() { }

template <typename Dtype>
void CuDNNDeConvolutionLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*> &top) 
{
  const Dtype* bottom_data = bottom[0]->gpu_data();
  Dtype* top_data = top[0]->mutable_gpu_data();
  const Dtype* weight = this->blobs_[0]->gpu_data();
  
 	if (this->group_ == 1)
 	{
	 	CUDNN_CHECK(cudnnConvolutionBackwardData(
		      handle_[0],
		      cudnn::dataType<Dtype>::one,
		      filter_desc_, this->blobs_[0]->gpu_data(),
		      bottom_descs_, bottom_data,
		      conv_descs_,
		      bwd_data_algo_, workspace[0], workspace_bwd_data_sizes_,
		      cudnn::dataType<Dtype>::zero,
		      top_descs_, top_data)); 
		sync_conv_groups<<<1, 1>>>();        
	}
	else
	{
		for (int n = 0; n < bottom[0]->num(); n++) 
	 	{
	 		bottom_data += bottom[0]->offset(n);
	 		top_data += top[0]->offset(n);
			for (int g = 0; g < this->group_; g++) 
			{
				CUDNN_CHECK(cudnnConvolutionBackwardData(
				  handle_[0],
				  cudnn::dataType<Dtype>::one,
				  filter_desc_, this->blobs_[0]->gpu_data() + g*this->blobs_[0]->height()*this->blobs_[0]->width(),
				  bottom_descs_, bottom_data + g*bottom[0]->height()*bottom[0]->width(),
				  conv_descs_,
				  bwd_data_algo_, workspace[0], workspace_bwd_data_sizes_,
				  cudnn::dataType<Dtype>::zero,
				  top_descs_, top_data + g*top[0]->height()*top[0]->width())); 		
			}
		}	
		sync_conv_groups<<<1, 1>>>();        
	}	
}

template <typename Dtype>
void CuDNNDeConvolutionLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{
  const Dtype* top_diff = top[0]->gpu_diff();
  const Dtype* weight = this->blobs_[0]->gpu_data();
  
  Dtype* bottom_diff = bottom[0]->mutable_gpu_diff();
  if (this->group_ == 1)
 	{
		CUDNN_CHECK(cudnnConvolutionForward(handle_[0],
		      cudnn::dataType<Dtype>::one,
		      top_descs_, top_diff,
		      filter_desc_, weight,
		      conv_descs_,
		      fwd_algo_, workspace[1], workspace_fwd_sizes_,
		      cudnn::dataType<Dtype>::zero,
		      bottom_descs_, bottom_diff));
		sync_conv_groups<<<1, 1>>>();              
	}
	else
	{	
		for (int n = 0; n < top[0]->num(); n++) 
	 	{
	 		top_diff += top[0]->offset(n);
	 		bottom_diff += bottom[0]->offset(n);
			for (int g = 0; g < this->group_; g++) 
			{
				CUDNN_CHECK(cudnnConvolutionForward(handle_[0],
		      cudnn::dataType<Dtype>::one,
		      top_descs_, top_diff + g * top[0]->height()*top[0]->width(),
		      filter_desc_, weight + g * this->blobs_[0]->height()*this->blobs_[0]->width(),
		      conv_descs_,
		      fwd_algo_, workspace[1], workspace_fwd_sizes_,
		      cudnn::dataType<Dtype>::zero,
		      bottom_descs_, bottom_diff + bottom[0]->height()*bottom[0]->width()));
			}
		}	
		sync_conv_groups<<<1, 1>>>();        
		
	}	      
}

INSTANTIATE_LAYER_GPU_FUNCS(CuDNNDeConvolutionLayer);

}  // namespace caffe
