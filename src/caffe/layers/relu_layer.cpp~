#include <algorithm>
#include <vector>

#include "caffe/layers/relu_layer.hpp"

namespace caffe {

template <typename Dtype>
void ReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
	for (int i=0;i<this->workspace_.size();i++)
		delete this->workspace_[i];
	this->workspace_.clear();	
	
	this->workspace_.resize(3); 
	this->workspace_[0] = new Blob<Dtype>();
	this->workspace_[1] = new Blob<Dtype>();
	this->workspace_[2] = new Blob<Dtype>();	
}


template <typename Dtype>
void ReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
	
	
  top[0]->ReshapeLike(*bottom[0]);
  flag.Reshape(bottom[0]->num(),bottom[0]->channels(),bottom[0]->height(),bottom[0]->width());
}

template <typename Dtype>
void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
}

template <typename Dtype>
void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{
}


#ifdef CPU_ONLY
STUB_GPU(ReLULayer);
#endif

INSTANTIATE_CLASS(ReLULayer);
REGISTER_LAYER_CLASS(ReLU);
}  // namespace caffe
