#include <vector>

#include "caffe/layers/dropout_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
__global__ void DropoutForward(const int n, const Dtype* in, const unsigned int* mask, const unsigned int threshold, const float scale, Dtype* out) 
{
  CUDA_KERNEL_LOOP(index, n) 
  {
    out[index] = in[index] * (mask[index] > threshold) * scale;
  }
}

template <typename Dtype>
__global__ void DropoutBackward(const int n, const Dtype* in_diff, const unsigned int* mask, const unsigned int threshold, const float scale, Dtype* out_diff) 
{
  CUDA_KERNEL_LOOP(index, n) 
  {
    out_diff[index] = in_diff[index] * scale * (mask[index] > threshold);
  }
}

template <typename Dtype>
void DropoutLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
  if (Caffe::phase() == TRAIN)
  {
    unsigned int* mask = static_cast<unsigned int*>(rand_vec_.mutable_gpu_data());
    caffe_gpu_rng_uniform(bottom[0]->count(), mask);
    DropoutForward<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>
    (bottom[0]->count(), bottom[0]->gpu_data(), mask, uint_thres_, scale_, top[0]->mutable_gpu_data());
  } 
  else 
    caffe_copy(bottom[0]->count(), bottom[0]->gpu_data(), top[0]->mutable_gpu_data());
  
}

template <typename Dtype>
void DropoutLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom) 
{
  if (Caffe::phase() == TRAIN)
  {
    const unsigned int* mask = static_cast<const unsigned int*>(rand_vec_.gpu_data());
    DropoutBackward<Dtype><<<CAFFE_GET_BLOCKS(bottom[0]->count()),CAFFE_CUDA_NUM_THREADS>>>
    (bottom[0]->count(), top[0]->gpu_diff(), mask, uint_thres_, scale_, bottom[0]->mutable_gpu_diff());
  } 
  else 
    caffe_copy(top[0]->count(), top[0]->gpu_diff(), bottom[0]->mutable_gpu_diff());
}

INSTANTIATE_LAYER_GPU_FUNCS(DropoutLayer);

}  // namespace caffe
