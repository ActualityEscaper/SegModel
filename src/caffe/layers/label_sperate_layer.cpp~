#include <vector>

#include "caffe/layers/label_sperate_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
void LabelSperateLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{
#if 0
	FILE*  fid = fopen("stuff36.txt","rb");
	if (fid == NULL)
		LOG(FATAL)<<"stuff file not found";
	for(int i=0;i<150;i++)
		fscanf(fid,"%d",&stuff_mapping[i]);
	fclose(fid);	
	fid = fopen("object115.txt","rb");
	if (fid == NULL)
		LOG(FATAL)<<"object file not found";
	for(int i=0;i<150;i++)
		fscanf(fid,"%d",&object_mapping[i]);	
	fclose(fid);
#endif
}

template <typename Dtype>
void LabelSperateLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) 
{
	int num = bottom[0]->num();
	int channels = bottom[0]->channels();
  int height = bottom[0]->height();
  int width = bottom[0]->width();
//------------------classification
	top[0]->Reshape(num,1,1,1);
	top[1]->Reshape(num,1,1,1);
	top[2]->Reshape(num,1,1,1);
	top[3]->Reshape(num,1,1,1);
	top[4]->Reshape(num,1,1,1);
	top[5]->Reshape(num,1,1,1);
	top[6]->Reshape(num,1,1,1);
	top[7]->Reshape(num,1,1,1);
	top[8]->Reshape(num,1,1,1);
	top[9]->Reshape(num,1,1,1);
//------------------localization 
	top[10]->Reshape(num,28,1,1);

	
#if 0
	top[0]->ReshapeLike(*bottom[0]);
	top[1]->ReshapeLike(*bottom[0]);
#endif
}

template <typename Dtype>
void LabelSperateLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top)
{	
	int num = bottom[0]->num();
	int channels = bottom[0]->channels();
  int height = bottom[0]->height();
  int width = bottom[0]->width();

  
	for (int n=0;n<num;n++)
	{
		
//-----gender
		top[0]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+0];
//-----hairlength
		top[1]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+1];
		
//-----head		
		for (int c=0;c<4;c++)
			top[10]->mutable_cpu_data()[n*24+c]  = bottom[0]->cpu_data()[n*channels+2+c];		
//-----top
		top[2]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+6];
		top[3]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+7];
		for (int c=0;c<4;c++)
			top[10]->mutable_cpu_data()[n*24+4+c]  = bottom[0]->cpu_data()[n*channels+8+c];		
//------down			
		top[4]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+12];
		top[5]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+13];
		for (int c=0;c<4;c++)
			top[10]->mutable_cpu_data()[n*24+8+c]  = bottom[0]->cpu_data()[n*channels+14+c];		
//------shoes		
		top[6]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+18];
		top[7]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+19];
		for (int c=0;c<8;c++)
			top[10]->mutable_cpu_data()[n*24+12+c]  = bottom[0]->cpu_data()[n*channels+20+c];		
//------hat
		for (int c=0;c<4;c++)
			top[10]->mutable_cpu_data()[n*24+20+c]  = bottom[0]->cpu_data()[n*channels+28+c];		
//------bag		
		top[8]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+32];
		top[9]->mutable_cpu_data()[n] = bottom[0]->cpu_data()[n*channels+33];
		for (int c=0;c<4;c++)
			top[10]->mutable_cpu_data()[n*24+24+c]  = bottom[0]->cpu_data()[n*channels+34+c];		
//------------------localization 
		
	}
	for(int i=0;i<top[10]->count();i++)
	{
		if (top[10]->cpu_data()[i] > 10)
		{
			LOG(INFO)<<"bad sample detected";
			top[10]->mutable_cpu_data()[i] = 10;
		}	
		if (top[10]->cpu_data()[i] < 0 && top[10]->cpu_data()[i] != -1)
		{
			LOG(INFO)<<"bad sample detected";
			top[10]->mutable_cpu_data()[i] = 0;
		}
	}
	//LOG(INFO)<<bottom[0]->cpu_data()[0];
	//LOG(INFO)<<top[0]->cpu_data()[0];
#if 0
	for(int i=0;i<bottom[0]->count();i++)
	{
		if (bottom[0]->cpu_data()[i] == 255)
		{
			top[0]->mutable_cpu_data()[i] = 255;
			top[1]->mutable_cpu_data()[i] = 255;
		}
		else
		{
			top[0]->mutable_cpu_data()[i] = stuff_mapping[int(bottom[0]->cpu_data()[i])];
			top[1]->mutable_cpu_data()[i] = object_mapping[int(bottom[0]->cpu_data()[i])];
		}	
	}
#endif
}

template <typename Dtype>
void LabelSperateLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom)
{
}

#ifdef CPU_ONLY
STUB_GPU(LabelSperateLayer);
#endif

INSTANTIATE_CLASS(LabelSperateLayer);
REGISTER_LAYER_CLASS(LabelSperate);
}  // namespace caffe
		
