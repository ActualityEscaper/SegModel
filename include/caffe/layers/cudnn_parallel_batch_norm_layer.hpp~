#ifndef CAFFE_CUDNN_PARALLEL_BATCH_NORM_LAYER_HPP_
#define CAFFE_CUDNN_PARALLEL_BATCH_NORM_LAYER_HPP_

#include <vector>

#include "caffe/blob.hpp"
#include "caffe/layer.hpp"
#include "caffe/proto/caffe.pb.h"


namespace caffe {

#ifdef USE_CUDNN

template <typename Dtype>
class CuDNNParallelBatchNormLayer : public Layer<Dtype> 
{
 public:
  explicit CuDNNParallelBatchNormLayer(const LayerParameter& param) : Layer<Dtype>(param), handles_setup_(false)  {}
  virtual ~CuDNNParallelBatchNormLayer();
  virtual inline const char* type() const { return "DeConvolution"; }
  
  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top);
  virtual void Reshape(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top);
	virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top);
  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom);
  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,  const vector<Blob<Dtype>*>& top);
  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top, const vector<Blob<Dtype>*>& bottom);

 protected:
 

	double number_collect_sample;

  bool handles_setup_;
  vector<cudnnHandle_t>             parallel_handle_;
  vector<cudaStream_t>              parallel_stream_;
  
  
  cudnnTensorDescriptor_t 	bottom_desc_;
  cudnnTensorDescriptor_t 	top_desc_;
  cudnnTensorDescriptor_t 	scale_bias_desc_;
  
  vector<shared_ptr<Blob<Dtype> > > parallel_blobs_;
  vector<Blob<Dtype>* > savedmean;
  vector<Blob<Dtype>* > savedinvvariance; 	
};		
#endif

}  // namespace caffe

#endif 
