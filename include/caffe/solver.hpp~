#ifndef CAFFE_SOLVER_HPP_
#define CAFFE_SOLVER_HPP_
#include <boost/function.hpp>
#include <string>
#include <vector>

#include "caffe/net.hpp"
#include "caffe/solver_factory.hpp"

namespace caffe 
{


template <typename Dtype>
class Solver 
{
 public:
 	explicit Solver(const SolverParameter& param);
  void Solve(const char* resume_file = NULL);
  void dispaly_loss(Dtype loss);
  
  virtual void ApplyUpdate() = 0;
  
 	void Snapshot();
	void test();
	void TestSegmentation();
  void Restore(const char* resume_file);
	virtual ~Solver() 
  {}



  
  inline const SolverParameter& param() const { return param_; }
  inline shared_ptr<Net<Dtype> > net() { return net_; }
  int iter() { return iter_; }
 protected:
  SolverParameter param_;
  int iter_;
  shared_ptr<Net<Dtype> > net_;
  shared_ptr<Net<Dtype> > test_net_;

	vector<shared_ptr<Blob<Dtype> > > history_;


	int start_iter_;
	int average_loss_;
	vector<Dtype> losses_;
	Dtype smoothed_loss_;

  int current_step_;

  DISABLE_COPY_AND_ASSIGN(Solver);
};


}  // namespace caffe

#endif  // CAFFE_SOLVER_HPP_
