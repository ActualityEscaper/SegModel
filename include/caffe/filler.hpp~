// Fillers are random number generators that fills a blob using the specified
// algorithm. The expectation is that they are only going to be used during
// initialization time and will not involve any GPUs.

#ifndef CAFFE_FILLER_HPP
#define CAFFE_FILLER_HPP

#include <string>

#include "caffe/blob.hpp"
#include "caffe/proto/caffe.pb.h"
#include "caffe/syncedmem.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

/// @brief Fills a Blob with constant or randomly-generated data.
template <typename Dtype>
class Filler 
{
 public:
  explicit Filler(const FillerParameter& param) : filler_param_(param) 
  {}
  virtual ~Filler() 
  {}
  virtual void Fill(Blob<Dtype>* blob) = 0;
 protected:
  FillerParameter filler_param_;
};  // class Filler



template <typename Dtype>
class MSRAFiller : public Filler<Dtype> 
{
 public:
  explicit MSRAFiller(const FillerParameter& param) : Filler<Dtype>(param) 
  {}
  virtual void Fill(Blob<Dtype>* blob) 
  {
    CHECK(blob->count());
    int fan_in = blob->count() / blob->num();
    int fan_out = blob->count() / blob->channels();
    Dtype n = fan_in;  // default to fan_in
    if (this->filler_param_.variance_norm() == FillerParameter_VarianceNorm_AVERAGE) 
      n = (fan_in + fan_out) / Dtype(2);
    else if (this->filler_param_.variance_norm() == FillerParameter_VarianceNorm_FAN_OUT) 
      n = fan_out;

    Dtype std = sqrt(Dtype(2) / n);
    caffe_rng_gaussian<Dtype>(blob->count(), Dtype(0), std, blob->mutable_cpu_data());
  }
};


template <typename Dtype>
class BilinearFiller : public Filler<Dtype> 
{
 public:
  explicit BilinearFiller(const FillerParameter& param) : Filler<Dtype>(param) 
  {}
  virtual void Fill(Blob<Dtype>* blob) {
    CHECK_EQ(blob->width(), blob->height()) << "Filter must be square";
    Dtype* data = blob->mutable_cpu_data();
    int f = ceil(blob->width() / 2.);
    float c = (2 * f - 1 - f % 2) / (2. * f);
    for (int i = 0; i < blob->count(); ++i) 
    {
      float x = i % blob->width();
      float y = (i / blob->width()) % blob->height();
      data[i] = (1 - fabs(x / f - c)) * (1 - fabs(y / f - c));
    }
  }
};

/**
 * @brief Get a specific filler from the specification given in FillerParameter.
 *
 * Ideally this would be replaced by a factory pattern, but we will leave it
 * this way for now.
 */
template <typename Dtype>
Filler<Dtype>* GetFiller(const FillerParameter& param) {
  const std::string& type = param.type(); 
  if (type == "msra") 
    return new MSRAFiller<Dtype>(param);
  else if (type == "bilinear") 
    return new BilinearFiller<Dtype>(param);
  else if (type == "potts") 
    return new PottsFiller<Dtype>(param);  
  else 
    CHECK(false) << "Unknown filler name: " << param.type();
  return (Filler<Dtype>*)(NULL);
}

}  // namespace caffe

#endif  // CAFFE_FILLER_HPP_
